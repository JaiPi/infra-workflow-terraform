name: Reusable Terraform Drift Detection

on:
  workflow_call:
    inputs:
      runner:
        type: string
        required: false
        default: id
      terraform_version:
        type: string
        required: false
      repositories:
        type: string
        required: false
      aws_region:
        type: string
        required: false
        default: eu-west-1
      role_to_assume:
        type: string
        required: true
      working_directory:
        type: string
        required: false
        default: '.'
      backend_config_file:
        type: string
        required: false      
      terraform_workspace:
        type: string
        required: false
        default: default
      vars_file_directory:
        type: string
        required: false
        default: environments

permissions:
  contents: read
  id-token: write
  issues: write

env:
  # https://developer.hashicorp.com/terraform/cli/config/environment-variables
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  terraform-drift-detection:
    name: Terraform Drift Detection for ${{ inputs.terraform_workspace }}
    runs-on: vtv-runner-set-${{ inputs.runner }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Setup AWS CLI
        uses: CelfocusProduct-VTV/setup-aws-cli@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate Github Token
        id: gh-token
        if: ${{ inputs.repositories }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_REPO_READER_APP_ID }}
          private-key: ${{ secrets.GH_REPO_READER_PRIVATE_KEY }}
          repositories: ${{ inputs.repositories }}

      - name: Configure URL with Github Token
        if: ${{ inputs.repositories }}
        run: git config --global url."https://oauth2:${{ steps.gh-token.outputs.token }}@github.com".insteadOf "https://github.com"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role_to_assume }}

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Check if Terraform is formatted
        run: terraform fmt -recursive -diff -check

      - name: Initialize Terraform
        run: terraform init --backend-config=${{ inputs.backend_config_file }}

      - name: Validate Terraform configuration
        run: terraform validate

      - name: Select Terraform workspace
        run: terraform workspace select -or-create ${{ inputs.terraform_workspace }}

      - name: Generate Terraform plan
        id: terraform-plan
        run: terraform plan -var-file=${{ inputs.vars_file_directory }}/${{ inputs.terraform_workspace }}.tfvars -detailed-exitcode
        continue-on-error: true

      - name: Create GitHub Issue on Drift Detection
        if: ${{ steps.terraform-plan.outputs.exitcode == '2' }}
        uses: actions/github-script@v7
        with:
          script: |
            const workspace = '${{ inputs.terraform_workspace }}';
            const currentDate = new Date().toISOString().split('T')[0];
            const issueTitle = `ðŸš¨ Terraform Drift Detected: ${workspace} on ${currentDate}`;
            const issueBody = `
            ## Terraform Drift Detected
            Terraform detected drift in the infrastructure.

            **Workspace:** ${workspace}  
            **Date:** ${currentDate}  
            **GitHub Actions Run:** [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Please review the changes and take necessary actions.
            `;
            const label = "terraform-drift";

            // Check if an open issue with the same title exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              labels: label,
            });

            const existingIssue = issues.data.find(issue => issue.title === issueTitle);

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: [label],
              });
            } else {
              console.log(`Issue already exists: ${existingIssue.html_url}`);
            }

            const terraformExitCode = ${{ steps.terraform-plan.outputs.exitcode }};
            console.log(`Exiting with Terraform plan exit code: ${terraformExitCode}`);
            process.exit(terraformExitCode);
